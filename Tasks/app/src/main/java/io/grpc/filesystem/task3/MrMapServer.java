/*
 * gRPC server node to accept calls from the clients and serve based on the method that has been requested
 */

package io.grpc.filesystem.task3;

import com.task3.proto.AssignJobGrpc;
import io.grpc.Server;
import io.grpc.ServerBuilder;
import io.grpc.filesystem.task2.MapReduce;

import java.io.IOException;
import java.util.concurrent.TimeUnit;

public class MrMapServer {

    private Server server;

    public static void main(String[] args) throws IOException, InterruptedException {
        final MrMapServer mrServer = new MrMapServer();
        for (String i : args) {
            mrServer.start(Integer.parseInt(i));
        }
        mrServer.server.awaitTermination();
    }

    private void start(int port) throws IOException {
        server = ServerBuilder.forPort(port).addService(new MrMapServerImpl()).build().start();
        System.out.println("Listening on: " + port);
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            System.err.println("Terminating the server at port: " + port);
            try {
                server.shutdown().awaitTermination(10, TimeUnit.SECONDS);
            } catch (InterruptedException e) {
                e.printStackTrace(System.err);
            }
        }));
    }

    static class MrMapServerImpl extends AssignJobGrpc.AssignJobImplBase {

        /*
         * Insert your code here.
         * Override the map function to accept the request and perform Map
         * Understand the autogenerated file Assignment1/BCS-DS-Assignment-Package/Task3/app/build/generated/source/proto/main/grpc/com/task3/proto/AssignJobGrpc.java
         * Look through the available functions and definition in this Grpc file to complete the task
         * Use your previously written MapReduce.map function.
         */

    }
}
